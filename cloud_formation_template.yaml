AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to deploy a web server for the SDE job challenge.
Resources:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and HTTPS access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      ImageId: ami-0c02fb55956c7d316
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          yum update -y
          yum install -y httpd mod_ssl python3-pip ec2-instance-connect
          yum install -y httpd mod_ssl
          systemctl start httpd
          systemctl enable httpd
          echo "<html><head><title>Hello World</title></head><body><h1>Hello World!</h1></body></html>" > /var/www/html/index.html
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/pki/tls/private/server.key -out /etc/pki/tls/certs/server.crt -subj "/C=US/ST=PA/L=Philadelhia/O=Kwami/CN=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)"
          sed -i 's/Listen 80/Listen 80\nListen 443 https/' /etc/httpd/conf/httpd.conf
          echo -e "<VirtualHost *:80>\nRedirect permanent / https://$(curl http://169.254.169.254/latest/meta-data/public-ipv4)/\n</VirtualHost>\n<VirtualHost *:443>\nSSLEngine on\nSSLCertificateFile /etc/pki/tls/certs/server.crt\nSSLCertificateKeyFile /etc/pki/tls/private/server.key\nDocumentRoot /var/www/html\n</VirtualHost>" > /etc/httpd/conf.d/ssl.conf
          systemctl restart httpd
          # Install requests library for Python
          pip3 install requests
          # Create the test script
          cat > test_redirect.py << EOF
          import requests
          def test_http_redirect_to_https():
              server_ip = "$(curl http://169.254.169.254/latest/meta-data/public-ipv4)"
              response = requests.get(f'http://{server_ip}', allow_redirects=False)
              assert response.status_code == 301
              assert 'https://' in response.headers['Location']
          if __name__ == '__main__':
              test_http_redirect_to_https()
          EOF
          # Run the test script
          python3 test_redirect.py
Outputs:
  WebsiteURL:
    Description: URL of the web server
    Value: !Sub http://${WebServerInstance.PublicDnsName}